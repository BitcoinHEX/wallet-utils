const abi = [
  'string public constant name',
  'string public constant symbol',
  'uint8 public constant decimals',
  'GlobalsStore public globals',
  'mapping(bytes20 => bool) public claimedBtcAddresses',
  'mapping(uint256 => DailyDataStore) public dailyData',
  'mapping(address => StakeStore[]) public staked',
  'mapping(uint256 => uint256) public xfLobby',
  'mapping(uint256 => mapping(address => XfLobbyQueueStore)) public xfLobbyMembers',
  'function storeDailyDataBefore(uint256 beforeDay) ',
  'function circulatingSupply() view returns (uint256)',
  'function getGlobalInfo() view returns (uint256[12] memory)',
  'function getDailyDataRange(uint256 offset, uint256 count) view returns (uint256[] memory list)',
  'function getCurrentDay() view returns (uint256)',
  'function startStake(uint256 newStakedHearts, uint256 newStakedDays) ',
  'function goodAccounting(address stakerAddr, uint256 stakeIndex, uint40 stakeIdParam) ',
  'function endStake(uint256 stakeIndex, uint40 stakeIdParam) ',
  'function getStakeCount(address ethAddr) view returns (uint256)',
  'function calcPayoutRewards(GlobalsCache memory g, uint256 stakeSharesParam, uint256 beginDay, uint256 endDay) private view returns (uint256 payout)',
  'function joinXfLobby(address referrerAddr) payable',
  'function leaveXfLobby(uint256 joinDay, uint256 count) ',
  'function flush() ',
  'function getXfLobbyEntry(address memberAddr, uint256 entryId) view returns (uint256 rawAmount, address referrerAddr)',
  'function canClaimBtcAddress(bytes20 btcAddr, uint256 rawSatoshis, bytes32[] calldata proof) view returns (bool)',
  'function btcAddressIsValid(bytes20 btcAddr, uint256 rawSatoshis, bytes32[] calldata proof) pure returns (bool)',
  'function merkleProofIsValid(bytes32 merkleLeaf, bytes32[] calldata proof) pure returns (bool)',
  'function signatureMatchesClaim(address claimToAddr, bytes32 pubKeyX, bytes32 pubKeyY, uint8 v, bytes32 r, bytes32 s) pure returns (bool)',
  'function pubKeyToEthAddress(bytes32 pubKeyX, bytes32 pubKeyY) pure returns (address)',
  'function pubKeyToBtcAddress(bytes32 pubKeyX, bytes32 pubKeyY, uint8 addrType) pure returns (bytes20)',
  'function claimBtcAddress(uint256 rawSatoshis, bytes32[] calldata proof, address claimToAddr, bytes32 pubKeyX, bytes32 pubKeyY, uint8 addrType, uint8 v, bytes32 r, bytes32 s, uint256 autoStakeDays, address referrerAddr) returns (uint256)',
];

module.exports = abi;
